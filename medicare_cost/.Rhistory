output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~replace_with_na(.,replace=0)))
provider_table %<>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~replace_with_na(.,replace=list(0))))
provider_table %<>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.)))
summary(provider_table$output_CapitalCharge)
summary(provider_table$output_OperatingCharge)
length(unique(provider_table$prvdr_num))
cost_report_files <- "G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports"
year_input = 2016
prvdr_2015 <- read_tsv(file=file.path(cost_report_files,"table_2015.txt"))
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"table_2018.txt"))
prvdr_2019 <- read_tsv(file=file.path(cost_report_files,"table_2019.txt"))
overlap_year_filter <- function(provider_table,year_input){
start_year = as.Date(paste0(year_input,"-01-01"))
end_year = as.Date(paste0(year_input,"-12-31"))
provider_table %<>%
rowwise() %>%
mutate(overlap_year = Overlap(c(fy_bgn_dt,fy_end_dt),c(start_year,end_year))) %>%
ungroup() %>%
filter(overlap_year != 0)
return(provider_table)
}
prvdr_2015 %<>% overlap_year_filter(year_input = year_input)
prvdr_2016 %<>% overlap_year_filter(year_input = year_input)
prvdr_2017 %<>% overlap_year_filter(year_input = year_input)
prvdr_2018 %<>% overlap_year_filter(year_input = year_input)
prvdr_2019 %<>% overlap_year_filter(year_input = year_input)
length(unique(prvdr_2015$prvdr_num))
length(unique(prvdr_2016$prvdr_num))
source('C:/Users/kelse/OneDrive/Documents/Github Lown/hac-lvc/medicare_cost/medicare_cost.R', encoding = 'UTF-8')
prvdr_2016 %>%
group_by(prvdr_num) %>%
summarise(overlap_year = sum(overlap_year),
capitalCharge = sum(capitalCharge,na.rm=T),
capitalCost = sum(capitalCost,na.rm=T),
InpOperatingCharge = sum(InpOperatingCharge,na.rm=T),
InpOperatingCost = sum(InpOperatingCost,na.rm=T))
year_input = 2016
cost_report_files <- "G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports"
prvdr_2015 <- read_tsv(file=file.path(cost_report_files,"table_2015.txt"))
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"table_2018.txt"))
prvdr_2019 <- read_tsv(file=file.path(cost_report_files,"table_2019.txt"))
overlap_year_filter <- function(provider_table,year_input){
start_year = as.Date(paste0(year_input,"-01-01"))
end_year = as.Date(paste0(year_input,"-12-31"))
provider_table %<>%
rowwise() %>%
mutate(overlap_year = Overlap(c(fy_bgn_dt,fy_end_dt),c(start_year,end_year))) %>%
ungroup() %>%
filter(overlap_year != 0)
return(provider_table)
}
prvdr_2015 %<>% overlap_year_filter(year_input = year_input)
prvdr_2016 %<>% overlap_year_filter(year_input = year_input)
prvdr_2017 %<>% overlap_year_filter(year_input = year_input)
prvdr_2018 %<>% overlap_year_filter(year_input = year_input)
prvdr_2019 %<>% overlap_year_filter(year_input = year_input)
prvdr_2016 %>%
group_by(prvdr_num) %>%
summarise(overlap_year = sum(overlap_year),
capitalCharge = sum(capitalCharge,na.rm=T),
capitalCost = sum(capitalCost,na.rm=T),
InpOperatingCharge = sum(InpOperatingCharge,na.rm=T),
InpOperatingCost = sum(InpOperatingCost,na.rm=T))
provider_grouped <- function(provider_table){
provider_table %<>%
group_by(prvdr_num) %>%
summarise(overlap_year = sum(overlap_year),
capitalCharge = sum(capitalCharge,na.rm=T),
capitalCost = sum(capitalCost,na.rm=T),
InpOperatingCharge = sum(InpOperatingCharge,na.rm=T),
InpOperatingCost = sum(InpOperatingCost,na.rm=T))
return(provider_table)
}
prvdr_2015 %<>% provider_grouped()
prvdr_2016 %<>% provider_grouped()
prvdr_2017 %<>% provider_grouped()
prvdr_2018 %<>% provider_grouped()
prvdr_2019 %<>% provider_grouped()
# 2016 was a leap year
total_days = ifelse(year_input==2016,365,364)
total_days
adj_year_cal <- function(provider_table){
provider_table %<>%
mutate(adj_year = round(overlap_year/total_days,2)) %>%
rowwise() %>%
mutate_at(vars(capitalCharge,capitalCost,InpOperatingCharge,InpOperatingCost),
list(adj=~.*adj_year)) %>%
ungroup()
return(provider_table)
}
prvdr_2015 %<>% adj_year_cal()
prvdr_2016 %<>% adj_year_cal()
prvdr_2017 %<>% adj_year_cal()
prvdr_2018 %<>% adj_year_cal()
prvdr_2019 %<>% adj_year_cal()
provider_table <- full_join(prvdr_2015,prvdr_2016,by="prvdr_num",suffix=c("","_16")) %>%
full_join(prvdr_2017,by="prvdr_num",suffix=c("","_17")) %>%
full_join(prvdr_2018,by="prvdr_num",suffix=c("","_18")) %>%
full_join(prvdr_2019,by="prvdr_num",suffix=c("","_19"))
View(provider_table)
provider_table %<>%
rowwise() %>%
mutate(cvrd_ttl = rowSums(across(contains("adj_year")),na.rm = T)) %>%
ungroup()
## check if anything is greater than one
print("fraction of year covered")
print(summary(provider_table$cvrd_ttl))
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
)
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(vars(contains("output_")),cvrd_ttl) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(vars(contains("output_"),cvrd_ttl)) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(vars(contains("output_","cvrd_ttl"))) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(vars(contains("output_"|"cvrd_ttl"))) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(contains("output_")) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(contains("output_") | contains("cvrd_ttl")) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(contains("output_") | contains("cvrd_ttl")) %>%
# cost to charge ratios:
rowwise() %>%
mutate(Operating_CCR = output_OperatingCost/output_OperatingCharge,
Capital_CCR = output_CapitalCost/output_OperatingCharge) %>%
mutate(Medicare_CCR = Operating_CCR + Capital_CCR) %>% View()
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(contains("prvdr_num") | contains("output_") | contains("cvrd_ttl")) %>%
# cost to charge ratios:
rowwise() %>%
mutate(Operating_CCR = output_OperatingCost/output_OperatingCharge,
Capital_CCR = output_CapitalCost/output_OperatingCharge) %>%
mutate(Medicare_CCR = Operating_CCR + Capital_CCR) %>% View()
prvdr_2015 <- read_tsv(file=file.path(cost_report_files,"table_2015.txt"))
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"table_2018.txt"))
prvdr_2019 <- read_tsv(file=file.path(cost_report_files,"table_2019.txt"))
overlap_year_filter <- function(provider_table,year_input){
start_year = as.Date(paste0(year_input,"-01-01"))
end_year = as.Date(paste0(year_input,"-12-31"))
provider_table %<>%
rowwise() %>%
mutate(overlap_year = Overlap(c(fy_bgn_dt,fy_end_dt),c(start_year,end_year))) %>%
ungroup() %>%
filter(overlap_year != 0)
return(provider_table)
}
prvdr_2015 %<>% overlap_year_filter(year_input = year_input)
prvdr_2016 %<>% overlap_year_filter(year_input = year_input)
prvdr_2017 %<>% overlap_year_filter(year_input = year_input)
prvdr_2018 %<>% overlap_year_filter(year_input = year_input)
prvdr_2019 %<>% overlap_year_filter(year_input = year_input)
View(provider_table)
View(prvdr_2015)
View(prvdr_2016)
View(prvdr_2017)
provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(contains("prvdr_num") | contains("output_") | contains("cvrd_ttl")) %>%
# cost to charge ratios:
rowwise() %>%
mutate(Operating_CCR = output_OperatingCost/output_OperatingCharge,
Capital_CCR = output_CapitalCost/output_OperatingCharge) %>%
mutate(Medicare_CCR = Operating_CCR + Capital_CCR) -> output_table
summary(output_table$Medicare_CCR)
quantile(output_table)
quantile(output_table$Medicare_CCR,probs = c(0.05,0.95))
quantile(output_table$Medicare_CCR,probs = c(0.05,0.95),na.rm = T)
quantile(output_table$Medicare_CCR,probs = c(0.01,0.99),na.rm = T)
quantile(output_table$Medicare_CCR,probs = c(0.025,0.975),na.rm = T)
quantile(output_table$Medicare_CCR,probs = c(0.05,0.95),na.rm = T)
output_table <- provider_table %>%
mutate(output_OperatingCost = rowSums(across(contains("InpOperatingCost_adj")),na.rm = T),
output_OperatingCharge = rowSums(across(contains("InpOperatingCharge_adj")),na.rm = T),
output_CapitalCost = rowSums(across(contains("capitalCost_adj")),na.rm=T),
output_CapitalCharge = rowSums(across(contains('capitalCharge_adj')),na.rm=T)) %>%
mutate_at(vars(contains("output_")),list(~if_else(.==0,as.double(NA),.))) %>%
select(contains("prvdr_num") | contains("output_") | contains("cvrd_ttl")) %>%
# cost to charge ratios:
rowwise() %>%
mutate(Operating_CCR = output_OperatingCost/output_OperatingCharge,
Capital_CCR = output_CapitalCost/output_OperatingCharge) %>%
mutate(Medicare_CCR = Operating_CCR + Capital_CCR) %>% ungroup()
acceptable_range <- with(output_table,quantile(Medicare_CCR,probs=c(0.05,0.95),na.rm=T))
acceptable_range
?between
output_table %<>%
rowwise() %>%
mutate(Medicare_CCR_rmOut = between(Medicare_CCR,acceptable_range[1],acceptable_range[2])) %>%
ungroup()
View(output_table)
output_table %<>%
rowwise() %>%
mutate(Medicare_CCR_rmOut = if_else(between(Medicare_CCR,acceptable_range[1],acceptable_range[2]),
Medicare_CCR,as.double(NA))) %>%
ungroup()
View(output_table)
quantile(output_table$Medicare_CCR,probs = c(0.03,0.97),na.rm = T)
summary(output_table$Medicare_CCR_rmOut)
write_tsv(output_table,path=file.path("G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports",
paste0("provider_table_",year_input,".txt")))
source('C:/Users/kelse/OneDrive/Documents/Github Lown/hac-lvc/medicare_cost/ccr_year.R')
View(provider_table)
View(output_table)
summary(output_table$Medicare_CCR)
summary(output_table$Medicare_CCR_rmOut)
print("\nacceptable range")
print("\nacceptable range")
print("/nacceptable range")
print(acceptable_range)
source('C:/Users/kelse/OneDrive/Documents/Github Lown/hac-lvc/medicare_cost/ccr_year.R')
library(here)
setwd(here())
library(tidyverse)
library(magrittr)
cost_report_files <- "G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports"
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"provider_table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"provider_table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"provider_table_2018.txt"))
prvdr_full <- prvdr_2016 %>%
full_join(prvdr_2017,by="prvdr_num",suffix=c("","_17")) %>%
full_join(prvdr_2018,by="prvdr_num",suffix=c("","_18"))
View(prvdr_full)
colnames(prvdr_2018)
?pivot_longer
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = vars(prvdr_num,contains("Medicare_CCR_rmOut")))
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR_rmOut"))
View(prvdr_CCR)
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR_rmOut" | "prvdr_num"),names_to = "year",values_to = "CCR")
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR_rmOut"),names_to = "year",values_to = "CCR")
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR_rmOut"),names_to = "year",values_to = "CCR")  %>%
select(prvdr_num,year,CCR)
View(prvdr_CCR)
# replace some missing values by the average CCR
prvdr_CCR %<>%
group_by(prvdr_num) %>%
mutate(ave_CCR = mean(CCR,na.rm = T)) %>%
ungroup() %>%
mutate(CCR_r = if_else(is.na(CCR),ave_CCR,CCR))
with(prvdr_CCR,sum(is.na(CCR)))
with(prvdr_CCR,sum(is.na(CCR_r)))
print(with(prvdr_CCR,sum(is.na(CCR)))-with(prvdr_CCR,sum(is.na(CCR_r))))
print("Provider-years with replaced values:")
print(with(prvdr_CCR,sum(is.na(CCR)))-with(prvdr_CCR,sum(is.na(CCR_r))))
View(prvdr_2016)
View(prvdr_CCR)
# clean up year column
prvdr_CCR %<>%
rowwise() %>%
mutate(year = case_when(grepl("17",year)==1 ~ "2017",
grepl("18",year)==1 ~ "2018",
grepl("18",year)==0 & grepl("17",year)==0 ~ "2016"))
prvdr_CCR %<>% ungroup()
table(prvdr_CCR$year)
ref_state <- read_csv(file = file.path(cost_report_files,"HCRIS_STATE_CODES.csv"))
View(ref_state)
prvdr_CCR %<>%
mutate(state_cd = substr(prvdr_num,1,2))
prvdr_CCR %<>%
mutate(CCR_r = if_else(is.nan(CCR_r),as.double(NA),CC_r))
prvdr_CCR %<>%
mutate(CCR_r = if_else(is.nan(CCR_r),as.double(NA),CCR_r))
prvdr_CCR %<>%
left_join(ref_state,by=c("state_cd"="Ssa_State_Cd"))
prvdr_CCR %<>%
group_by(State_Name,year) %>%
mutate(ave_state = mean(CCR,na.rm=T)) %>%
ungroup()
prvdr_CCR %<>%
rowwise() %>%
mutate(CCR_s = if_else(is.na(CCR_r),ave_state,CCR_r)) %>%
ungroup()
with(prvdr_CCR,sum(is.na(CCR)))
with(prvdr_CCR,sum(is.na(CCR_r)))
with(prvdr_CCR,sum(is.na(CCR_s)))
prvdr_CCR %<>%
mutate(CCR_s = if_else(is.nan(CCR_s),as.double(NA),CCR_s))
write_csv(prvdr_CR,path = file.path(cost_report_files,"output__CCR.csv"))
write_csv(prvdr_CCR,path = file.path(cost_report_files,"output__CCR.csv"))
write_csv(prvdr_CCR,na="",path = file.path(cost_report_files,"output__CCR.csv"))
source('C:/Users/kelse/OneDrive/Documents/Github Lown/hac-lvc/medicare_cost/ccr_threeyears.R')
source('C:/Users/kelse/OneDrive/Documents/Github Lown/hac-lvc/medicare_cost/ccr_threeyears.R')
View(prvdr_CCR)
table(nchar(prvdr_CCR$prvdr_num))
source('C:/Users/kelse/OneDrive/Documents/Github Lown/hac-lvc/medicare_cost/ccr_year.R')
library(here)
setwd(here())
library(tidyverse)
library(magrittr)
cost_report_files <- "G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports"
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"provider_table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"provider_table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"provider_table_2018.txt"))
prvdr_full <- prvdr_2016 %>%
full_join(prvdr_2017,by="prvdr_num",suffix=c("","_17")) %>%
full_join(prvdr_2018,by="prvdr_num",suffix=c("","_18"))
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR_rmOut"),names_to = "year",values_to = "CCR")  %>%
select(prvdr_num,year,CCR)
unique(prvdr_CCR$year)
cost_report_files <- "G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports"
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"provider_table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"provider_table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"provider_table_2018.txt"))
prvdr_full <- prvdr_2016 %>%
full_join(prvdr_2017,by="prvdr_num",suffix=c("","_17")) %>%
full_join(prvdr_2018,by="prvdr_num",suffix=c("","_18"))
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR_rmOut"),names_to = "year",values_to = "CCR")  %>%
select(prvdr_num,year,CCR)
unique(prvdr_CCR$year)
View(prvdr_CCR)
cost_report_files <- "G:/Shared drives/AV Med Overuse/1_HACS and LVC/cms downloads/cost reports"
prvdr_2016 <- read_tsv(file=file.path(cost_report_files,"provider_table_2016.txt"))
prvdr_2017 <- read_tsv(file=file.path(cost_report_files,"provider_table_2017.txt"))
prvdr_2018 <- read_tsv(file=file.path(cost_report_files,"provider_table_2018.txt"))
View(prvdr_2018)
prvdr_full <- prvdr_2016 %>%
full_join(prvdr_2017,by="prvdr_num",suffix=c("","_17")) %>%
full_join(prvdr_2018,by="prvdr_num",suffix=c("","_18"))
View(prvdr_full)
colnames(prvdr_full)
prvdr_full <- prvdr_2016 %>%
full_join(prvdr_2017,by="prvdr_num",suffix=c("","_17")) %>%
full_join(prvdr_2018,by="prvdr_num",suffix=c("","_18"))
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR"),names_to = "year",values_to = "CCR")  %>%
select(prvdr_num,year,CCR)
# clean up year column
prvdr_CCR %<>%
rowwise() %>%
mutate(year = case_when(grepl("17",year)==1 ~ "2017",
grepl("18",year)==1 ~ "2018",
grepl("18",year)==0 & grepl("17",year)==0 ~ "2016")) %>%
ungroup()
#----------------------------------------------------------------------#
# replace values #
acceptable_range <- prvdr_CCR %>%
group_by(year) %>%
summarise(mean_ccr = mean(CCR,na.rm=T),
sd_ccr = sd(CCR,na.rm=T)) %>%
mutate(lower_allowed = mean_ccr - 3*sd_ccr,
upper_allowed = mean_ccr + 3*sd_ccr)
acceptable_range
summary(prvdr_CCR$CCR)
#----------------------------------------------------------------------#
# replace values #
acceptable_range <- with(prvdr_CCR,quantile(CCR,probs=.05,0.95))
acceptable_range
?quantile
#----------------------------------------------------------------------#
# replace values #
acceptable_range <- with(prvdr_CCR,quantile(CCR,probs=c(.05,0.95)))
#----------------------------------------------------------------------#
# replace values #
acceptable_range <- with(prvdr_CCR,quantile(CCR,probs=c(.05,0.95),na.rm=T))
print("acceptable range")
print(acceptable_range)
with(prvdr_CCR %>% filter(year=="2016"),quantile(CCR,probs=c(.05,0.95),na.rm=T))
with(prvdr_CCR %>% filter(year=="2017"),quantile(CCR,probs=c(.05,0.95),na.rm=T))
with(prvdr_CCR %>% filter(year=="2018"),quantile(CCR,probs=c(.05,0.95),na.rm=T))
with(prvdr_CCR %>% filter(year=="2018"),mean(CCR,na.rm=T))
with(prvdr_CCR %>% filter(year=="2018"),quantile(CCR,probs=c(.025,0.975),na.rm=T))
#----------------------------------------------------------------------#
# replace values #
acceptable_range <- with(prvdr_CCR,quantile(CCR,probs=c(.05,0.95),na.rm=T))
acceptable_range
output_table %<>%
rowwise() %>%
mutate(Medicare_CCR_rmOut = if_else(between(Medicare_CCR,acceptable_range[1],acceptable_range[2]),
Medicare_CCR,as.double(NA))) %>%
ungroup()
prvdr_CCR %<>%
rowwise() %>%
mutate(Medicare_CCR_rmOut = if_else(between(Medicare_CCR,acceptable_range[1],acceptable_range[2]),
Medicare_CCR,as.double(NA))) %>%
ungroup()
prvdr_CCR %<>%
rowwise() %>%
mutate(Medicare_CCR_rmOut = if_else(between(CCR,acceptable_range[1],acceptable_range[2]),
CCR,as.double(NA))) %>%
ungroup()
prvdr_CCR %<>%
rowwise() %>%
mutate(Medicare_CCR_rmOut = if_else(between(CCR,acceptable_range[1],acceptable_range[2]),
CCR,as.double(NA))) %>%
ungroup()
# replace some missing values by the average CCR over the three years
prvdr_CCR %<>%
group_by(prvdr_num) %>%
mutate(ave_CCR = mean(CCR,na.rm = T)) %>%
ungroup() %>%
mutate(CCR_r = if_else(is.na(CCR),ave_CCR,CCR))
print("Provider-years with replaced values:")
print(with(prvdr_CCR,sum(is.na(CCR)))-with(prvdr_CCR,sum(is.na(CCR_r))))
prvdr_CCR %<>%
mutate(CCR_r = if_else(is.nan(CCR_r),as.double(NA),CCR_r))
ref_state <- read_csv(file = file.path(cost_report_files,"HCRIS_STATE_CODES.csv"))
prvdr_CCR %<>%
mutate(state_cd = substr(prvdr_num,1,2))
prvdr_CCR %<>%
left_join(ref_state,by=c("state_cd"="Ssa_State_Cd"))
prvdr_CCR %<>%
group_by(State_Name,year) %>%
mutate(ave_state = mean(CCR,na.rm=T)) %>%
ungroup()
prvdr_CCR %<>%
rowwise() %>%
mutate(CCR_s = if_else(is.na(CCR_r),ave_state,CCR_r)) %>%
ungroup()
prvdr_CCR %<>%
mutate_if(is.numeric,list(~if_else(is.nan(.),as.double(NA),.)))
write_csv(prvdr_CCR,na="",path = file.path(cost_report_files,"output__CCR.csv"))
prvdr_CCR <- prvdr_full %>%
pivot_longer(cols = contains("Medicare_CCR"),names_to = "year",values_to = "CCR")  %>%
select(prvdr_num,year,CCR)
# clean up year column
prvdr_CCR %<>%
rowwise() %>%
mutate(year = case_when(grepl("17",year)==1 ~ "2017",
grepl("18",year)==1 ~ "2018",
grepl("18",year)==0 & grepl("17",year)==0 ~ "2016")) %>%
ungroup()
#----------------------------------------------------------------------#
# replace values #
acceptable_range <- with(prvdr_CCR,quantile(CCR,probs=c(.05,0.95),na.rm=T))
print("acceptable range")
print(acceptable_range)
prvdr_CCR %<>%
rowwise() %>%
mutate(CCR_rm_extrm = if_else(between(CCR,acceptable_range[1],acceptable_range[2]),
CCR,as.double(NA))) %>%
ungroup()
